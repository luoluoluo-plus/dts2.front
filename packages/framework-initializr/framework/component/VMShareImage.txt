import { WeiXinPlugin } from "weixinplugin";
import UIBase from "../ui/UIBase";

const { ccclass, menu, property } = cc._decorator;

//1:微信好友，2:朋友圈
export enum ShareType{
    haoyou = 1,
    pengyouquan = 2,
    all = 3
}

/**
 *  [VM-ShareImage]
 *  专门处理 微信分享截图
 *  支持：微信小游戏，安卓，ios，h5（长按分享）
 */

@ccclass
@menu('ModelViewer/VM-ShareImage(截图分享)')
export default class VMShareImage extends UIBase {
    protected static className = "COMShareImage";

	@property(cc.Camera)
	camera: cc.Camera = null;
    @property({
        type: cc.Node,
        displayName:"好友按钮",
        visible:function(){return this.shareType != ShareType.pengyouquan}
    })
    btnHaoyou: cc.Node = null;
    @property({
        type: cc.Node,
        displayName:"朋友圈按钮",
        visible:function(){return this.shareType != ShareType.haoyou}
    })
    btnPengyouquan: cc.Node = null;
    @property({
        type: cc.Enum(ShareType),
        displayName: "好友or朋友圈"
    })
    shareType:ShareType = ShareType.haoyou;

	private _canvas: any = null;
	private _texture: cc.RenderTexture = null;
	private _width: number = null;
	private _height: number = null;
    private _bigImg: any;
    private type: number;

    onShow(){
        if(this.btnHaoyou){
            this.onRegisterEvent(this.btnHaoyou, this.onShareClick1);
        }

        if(this.btnPengyouquan){
            this.onRegisterEvent(this.btnPengyouquan, this.onShareClick2);
        }
    }

    onHide(){
        this._bigImg?.remove();
    }

    onStart(){
        if(!CC_DEBUG && cc.sys.platform != cc.sys.WECHAT_GAME && !cc.sys.isNative){
            this.shareImage();
        }
    }

    private onShareClick1(){
        this.type = 1;
    }

    private onShareClick2(){
        this.type = 2;
    }

	private shareImage(){
		this.initRenderTexture();

		if(cc.sys.platform === cc.sys.WECHAT_GAME){
			let canvas = this.createCanvas();
			this.createImg();
			this.saveFileByWechat(canvas);
		}else if(cc.sys.isNative){
			this.camera.enabled = true;
			let picData = this.initImage();
            // this.createCanvasByNative(picData);
			this.saveFileByNative(picData);
			this.camera.enabled = false;
		}else{
			this.createCanvas();
			var img = this.createImg();
            if(CC_DEBUG){
                this.showImage(img);
            }else{
                this.saveFileByH5(img);
            }
		}
	}
	
	private initRenderTexture () {
        let texture = new cc.RenderTexture();
        texture.initWithSize(cc.visibleRect.width, cc.visibleRect.height, cc["gfx"].RB_FMT_S8);
        this.camera.targetTexture = texture;
        this._texture = texture;
        this.camera.render();
    }

    // create the img element
    private createImg () {
        // return the type and dataUrl
        var dataURL = this._canvas.toDataURL("image/png");
        var img = document.createElement("img");
        img.src = dataURL;
        return img;
    }

    // create the canvas and context, filpY the image Data
    private createCanvas () {
        let width = this._texture.width;
        let height = this._texture.height;
        if (!this._canvas) {
            this._canvas = document.createElement('canvas');

            this._canvas.width = width;
            this._canvas.height = height;
        }
        else {
            this.clearCanvas();
        }
        let ctx = this._canvas.getContext('2d');
        this.camera.render();
        let data = this._texture.readPixels();
        // write the render data
        let rowBytes = width * 4; 
        for (let row = 0; row < height; row++) {
            let srow = height - 1 - row;
            let imageData = ctx.createImageData(width, 1);
            let start = srow * width * 4;
            for (let i = 0; i < rowBytes; i++) {
                imageData.data[i] = data[start + i];
            }

            ctx.putImageData(imageData, 0, row);
        }
        return this._canvas;
    }
    
    // show on the canvas
    private showImage (img) {
        let texture = new cc.Texture2D();
        texture.initWithElement(img);

        let spriteFrame = new cc.SpriteFrame();
        spriteFrame.setTexture(texture);

        let node = new cc.Node();
        let sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = spriteFrame;

        node.zIndex = cc.macro.MAX_ZINDEX;
        node.parent = cc.director.getScene();
        // set position
        let width = cc.winSize.width;
        let height = cc.winSize.height;
        node.x = width / 2;
        node.y = height / 2;
        node.on(cc.Node.EventType.TOUCH_START, () => {
            node.parent = null;
            node.destroy();
        });

        this.captureAction(node, width, height);
    }

    // sprite action
    private captureAction (capture, width, height) {
        let scaleAction = cc.scaleTo(1,0.3);
        let targetPos = cc.v2(width - width / 6,  height / 4);
        let moveAction = cc.moveTo(1, targetPos); 
        let spawn = cc.spawn(scaleAction, moveAction);
        capture.runAction(spawn);
        let blinkAction = cc.blink(0.1, 1);
        // scene action
        this.node.runAction(blinkAction);
    }

    private clearCanvas () {
        let ctx = this._canvas.getContext('2d');
        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
    }

	// override
    private initImage () {
        let data = this._texture.readPixels();
        this._width = this._texture.width;
        this._height = this._texture.height;
        let picData = this.filpYImage(data, this._width, this._height);
        return picData;
    }

    // override init with Data
    private createCanvasByNative (picData) {
        let texture = new cc.Texture2D();
        texture.initWithData(picData, 32, this._width, this._height);

        let spriteFrame = new cc.SpriteFrame();
        spriteFrame.setTexture(texture);

        let node = new cc.Node();
        let sprite = node.addComponent(cc.Sprite);
        sprite.spriteFrame = spriteFrame;

        node.zIndex = cc.macro.MAX_ZINDEX;
        node.parent = cc.director.getScene();
        // set position
        let width = cc.winSize.width;
        let height = cc.winSize.height;
        node.x = width / 2;
        node.y = height / 2;
        node.on(cc.Node.EventType.TOUCH_START, () => {
            node.parent = null;
            node.destroy();
        });

        this.captureAction(node, width, height);
    }

    private saveFileByNative (picData) {
        if (CC_JSB) {
            var filePath = jsb.fileUtils.getWritablePath() + 'render_to_sprite_image.png';
           
            let success = jsb["saveImageData"](picData, this._width, this._height, filePath)
            if (success) {
                console.log("save image data success, file: " + filePath);

                if(this.type == 1){
                    WeiXinPlugin.shareImageToSession(filePath);
                }else{
                    WeiXinPlugin.shareImageToTimeline(filePath);
                }
            }
            else {
                console.error("save image data failed!");
            }
        }
    }

    // This is a temporary solution
    private filpYImage (data, width, height) {
        // create the data array
        let picData = new Uint8Array(width * height * 4);
        let rowBytes = width * 4;
        for (let row = 0; row < height; row++) {
            let srow = height - 1 - row;
            let start = srow * width * 4;
            let reStart = row * width * 4;
            // save the piexls data
            for (let i = 0; i < rowBytes; i++) {
                picData[reStart + i] = data[start + i];
            }
        }
        return picData;
    }

	saveFileByWechat (tempCanvas) {
        // This is one of the ways that could save the img to your local.
        if (cc.sys.platform === cc.sys.WECHAT_GAME) {
            let self = this;
            let data = {
                x: 0,
                y: 0,
                width: tempCanvas.width,
                height: tempCanvas.height,
                // destination file sizes
                destWidth: tempCanvas.width,
                destHeight: tempCanvas.height,
                fileType: 'png',
                quality: 1
            }
            // https://developers.weixin.qq.com/minigame/dev/api/render/canvas/Canvas.toTempFilePathSync.html
            let _tempFilePath = tempCanvas.toTempFilePathSync(data);
            cc.log(`Capture file success!${_tempFilePath}`);
            // https://developers.weixin.qq.com/minigame/dev/api/media/image/wx.previewImage.html
            wx.previewImage({
                urls: [_tempFilePath],
                success: (res) => {
                    cc.log('Preview image success.');
                }
            });
        }
        else {
            cc.log('该样例只支持微信小游戏平台');
        }
    }

    private saveFileByH5(img){
        var dataURL = img.src;
        var href = dataURL.replace(/^data:image[^;]*/, "data:image/octet-stream");
        document.location.href = href; 

        var url = dataURL
		var gameDiv = document.getElementById('Cocos2dGameContainer');//获取div元素
		this._bigImg = document.createElement("img");//创建img元素
		this._bigImg.id = 'QRCode';
		this._bigImg.src = url;//给img标签添加图片源
		this._bigImg.alt = 'bigImg';

		this._bigImg.width = this._canvas.width*0.8;
		this._bigImg.height = this._canvas.height*0.8;
        this._bigImg.style.opacity = "0"
		this._bigImg.style.position = 'absolute';
        this._bigImg.style.top = "100px";//y坐标
		this._bigImg.style.left = parseInt(gameDiv.style.width.replace(/px/, '')) / 2 - this._bigImg.width / 2 + "px";//设置图片居中显示

		gameDiv.appendChild(this._bigImg);
    }
}